import { flatbuffers } from 'flatbuffers';

/**
 * Copyright 2018 ProximaX Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * ResourceHashMessage class generated by flatbuffers.
 * This class uses to access serialized data without parsing and unpacking
 */
export class ResourceHashMessage {

    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;

    __init(i: number, bb: flatbuffers.ByteBuffer): ResourceHashMessage {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    // tslint:disable-next-line:member-ordering
    static getRootAsResourceHashMessage(bb: flatbuffers.ByteBuffer, obj?: ResourceHashMessage): ResourceHashMessage {
        return (obj || new ResourceHashMessage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }


    digest(): string | null;
    digest(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    digest(optionalEncoding?: any): string | Uint8Array | null {
        // tslint:disable-next-line:no-non-null-assertion
        const offset = this.bb!.__offset(this.bb_pos, 4);
        // tslint:disable-next-line:no-non-null-assertion
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }


    hash(): string | null;
    hash(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    hash(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }


    keywords(): string | null;
    keywords(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    keywords(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }

    metaData(): string | null;
    metaData(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    metaData(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }


    name(): string | null;
    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    name(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }


    size(): number {
        const offset = this.bb!.__offset(this.bb_pos, 14);
        return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
    }


    timestamp(): flatbuffers.Long {
        const offset = this.bb!.__offset(this.bb_pos, 16);
        return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
    }


    type(): string | null;
    type(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    type(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 18);
        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
    }


    static startResourceHashMessage(builder: flatbuffers.Builder) {
        builder.startObject(8);
    }


    static addDigest(builder: flatbuffers.Builder, digestOffset: flatbuffers.Offset) {
        builder.addFieldOffset(0, digestOffset, 0);
    }

    static addHash(builder: flatbuffers.Builder, hashOffset: flatbuffers.Offset) {
        builder.addFieldOffset(1, hashOffset, 0);
    }


    static addKeywords(builder: flatbuffers.Builder, keywordsOffset: flatbuffers.Offset) {
        builder.addFieldOffset(2, keywordsOffset, 0);
    }


    static addMetaData(builder: flatbuffers.Builder, metaDataOffset: flatbuffers.Offset) {
        builder.addFieldOffset(3, metaDataOffset, 0);
    }


    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
        builder.addFieldOffset(4, nameOffset, 0);
    }

    static addSize(builder: flatbuffers.Builder, size: number) {
        builder.addFieldInt32(5, size, 0);
    }


    static addTimestamp(builder: flatbuffers.Builder, timestamp: flatbuffers.Long) {
        builder.addFieldInt64(6, timestamp, builder.createLong(0, 0));
    }


    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {
        builder.addFieldOffset(7, typeOffset, 0);
    }


    // tslint:disable-next-line:member-ordering
    static endResourceHashMessage(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }


    static finishResourceHashMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
        builder.finish(offset);
    }

}
