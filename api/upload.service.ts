/**
 * Proximax P2P Storage REST API
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: proximax.storage@proximax.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UploadService {

    protected basePath = 'http://demo-gateway.proximax.io';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Calls the garbage clean up and tries to unpin the given hash
     * This endpoint can be used to generates the datahash and uploads the file in the process.
     * @param multihash The pinned multihash
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cleanupPinnedContentUsingPOST(multihash: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public cleanupPinnedContentUsingPOST(multihash: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public cleanupPinnedContentUsingPOST(multihash: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public cleanupPinnedContentUsingPOST(multihash: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (multihash === null || multihash === undefined) {
            throw new Error('Required parameter multihash was null or undefined when calling cleanupPinnedContentUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (multihash !== undefined) {
            queryParameters = queryParameters.set('multihash', <any>multihash);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<string>(`${this.basePath}/upload/cleanup`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Grabs a zip file with static content, extract and load directory to the IPFS/P2P Network
     * Generates the Root hash of your directory.
     * @param file Base64 byte[] representation of the data object to be uploaded
     * @param name Custom Name of the data. If none is specified, timestamp will be used.
     * @param keywords Comma delimited Keyword/Tags
     * @param metadata Additional data in a JSON Format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public directoryExtractUsingPOST(file: Blob, name?: string, keywords?: string, metadata?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public directoryExtractUsingPOST(file: Blob, name?: string, keywords?: string, metadata?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public directoryExtractUsingPOST(file: Blob, name?: string, keywords?: string, metadata?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public directoryExtractUsingPOST(file: Blob, name?: string, keywords?: string, metadata?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling directoryExtractUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (keywords !== undefined) {
            queryParameters = queryParameters.set('keywords', <any>keywords);
        }
        if (metadata !== undefined) {
            queryParameters = queryParameters.set('metadata', <any>metadata);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/upload/dir/extract`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param data Base64 String representation of the data object to be uploaded
     * @param contentType Content Type of the Data. If none is given, system will try to detect.
     * @param name Custom Name of the data. If none is specified, timestamp will be used.
     * @param keywords Comma delimited Keyword/Tags
     * @param metadata Additional data in a JSON Format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadBase64StringBinaryUsingPOST(data: string, contentType?: string, name?: string, keywords?: string, metadata?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uploadBase64StringBinaryUsingPOST(data: string, contentType?: string, name?: string, keywords?: string, metadata?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uploadBase64StringBinaryUsingPOST(data: string, contentType?: string, name?: string, keywords?: string, metadata?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uploadBase64StringBinaryUsingPOST(data: string, contentType?: string, name?: string, keywords?: string, metadata?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling uploadBase64StringBinaryUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contentType !== undefined) {
            queryParameters = queryParameters.set('contentType', <any>contentType);
        }
        if (name !== undefined) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (keywords !== undefined) {
            queryParameters = queryParameters.set('keywords', <any>keywords);
        }
        if (metadata !== undefined) {
            queryParameters = queryParameters.set('metadata', <any>metadata);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/upload/base64/binary`,
            data,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param data Base64 byte[] representation of the data object to be uploaded
     * @param contentType Content Type of the Data. If none is given, system will try to detect.
     * @param name Custom Name of the data. If none is specified, timestamp will be used.
     * @param keywords Comma delimited Keyword/Tags
     * @param metadata Additional data in a JSON Format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadBytesBinaryUsingPOST(data: string, contentType?: string, name?: string, keywords?: string, metadata?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uploadBytesBinaryUsingPOST(data: string, contentType?: string, name?: string, keywords?: string, metadata?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uploadBytesBinaryUsingPOST(data: string, contentType?: string, name?: string, keywords?: string, metadata?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uploadBytesBinaryUsingPOST(data: string, contentType?: string, name?: string, keywords?: string, metadata?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling uploadBytesBinaryUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contentType !== undefined) {
            queryParameters = queryParameters.set('contentType', <any>contentType);
        }
        if (name !== undefined) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (keywords !== undefined) {
            queryParameters = queryParameters.set('keywords', <any>keywords);
        }
        if (metadata !== undefined) {
            queryParameters = queryParameters.set('metadata', <any>metadata);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/upload/bytes/binary`,
            data,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload the File to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param file The Multipart File that will be stored on the P2P Storage Network
     * @param name Custom Name of the data. If none is specified, timestamp will be used.
     * @param keywords Comma delimited Keyword/Tags
     * @param metadata Additional data in a JSON Format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadFileUsingPOST(file: Blob, name?: string, keywords?: string, metadata?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uploadFileUsingPOST(file: Blob, name?: string, keywords?: string, metadata?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uploadFileUsingPOST(file: Blob, name?: string, keywords?: string, metadata?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uploadFileUsingPOST(file: Blob, name?: string, keywords?: string, metadata?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadFileUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (keywords !== undefined) {
            queryParameters = queryParameters.set('keywords', <any>keywords);
        }
        if (metadata !== undefined) {
            queryParameters = queryParameters.set('metadata', <any>metadata);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<any>(`${this.basePath}/upload/file`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * uploadGenerateAndSign
     * 
     * @param xPvkey Sender Private Key
     * @param xPubkey Receiver Public Key
     * @param messageType Message Type ( PLAIN or SECURE )
     * @param file The Multipart File
     * @param keywords Comma delimited Keyword/Tags
     * @param metadata Json Format Data Structure
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadGenerateAndSignUsingPOST(xPvkey?: string, xPubkey?: string, messageType?: string, file?: Blob, keywords?: string, metadata?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public uploadGenerateAndSignUsingPOST(xPvkey?: string, xPubkey?: string, messageType?: string, file?: Blob, keywords?: string, metadata?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public uploadGenerateAndSignUsingPOST(xPvkey?: string, xPubkey?: string, messageType?: string, file?: Blob, keywords?: string, metadata?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public uploadGenerateAndSignUsingPOST(xPvkey?: string, xPubkey?: string, messageType?: string, file?: Blob, keywords?: string, metadata?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (messageType !== undefined) {
            queryParameters = queryParameters.set('messageType', <any>messageType);
        }
        if (keywords !== undefined) {
            queryParameters = queryParameters.set('keywords', <any>keywords);
        }
        if (metadata !== undefined) {
            queryParameters = queryParameters.set('metadata', <any>metadata);
        }

        let headers = this.defaultHeaders;
        if (xPvkey !== undefined && xPvkey !== null) {
            headers = headers.set('x-pvkey', String(xPvkey));
        }
        if (xPubkey !== undefined && xPubkey !== null) {
            headers = headers.set('x-pubkey', String(xPubkey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/upload/generate-sign`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload the Text to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param text A Free Form Text based data
     * @param name Custom Name of the data. If none is specified, timestamp will be used.
     * @param encoding Text Data Encoding. Default: UTF-8
     * @param keywords Comma delimited Keyword/Tags
     * @param metadata Additional data in a JSON Format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadPlainTextUsingPOST(text: string, name?: string, encoding?: string, keywords?: string, metadata?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uploadPlainTextUsingPOST(text: string, name?: string, encoding?: string, keywords?: string, metadata?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uploadPlainTextUsingPOST(text: string, name?: string, encoding?: string, keywords?: string, metadata?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uploadPlainTextUsingPOST(text: string, name?: string, encoding?: string, keywords?: string, metadata?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (text === null || text === undefined) {
            throw new Error('Required parameter text was null or undefined when calling uploadPlainTextUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (encoding !== undefined) {
            queryParameters = queryParameters.set('encoding', <any>encoding);
        }
        if (keywords !== undefined) {
            queryParameters = queryParameters.set('keywords', <any>keywords);
        }
        if (metadata !== undefined) {
            queryParameters = queryParameters.set('metadata', <any>metadata);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'text/plain'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/upload/text`,
            text,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
