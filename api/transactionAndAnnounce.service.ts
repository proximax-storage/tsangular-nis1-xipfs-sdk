/**
 * Proximax P2P Storage REST API
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: proximax.storage@proximax.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { RequestAnnounceDataSignature } from '../model/requestAnnounceDataSignature';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TransactionAndAnnounceService {

    protected basePath = 'http://demo-gateway.proximax.io';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Announce the DataHash to NEM/P2P Storage and P2P Database
     * Endpoint that can be use to announce the data hash transaction. This will grab the signed BinaryTransaferTransaction and create the P2P Database Entry for the specific data hash / transaction.
     * @param requestAnnounceDataSignature The Request Announce Data Signature Json Format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public announceRequestPublishDataSignatureUsingPOST(requestAnnounceDataSignature?: RequestAnnounceDataSignature, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public announceRequestPublishDataSignatureUsingPOST(requestAnnounceDataSignature?: RequestAnnounceDataSignature, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public announceRequestPublishDataSignatureUsingPOST(requestAnnounceDataSignature?: RequestAnnounceDataSignature, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public announceRequestPublishDataSignatureUsingPOST(requestAnnounceDataSignature?: RequestAnnounceDataSignature, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/transaction/announce`,
            requestAnnounceDataSignature,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the XPX Transaction Hash
     * Endpoint can be used to get XPX Transaction.
     * @param nemHash XPX Transaction Hash
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getXPXTransactionUsingGET(nemHash: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getXPXTransactionUsingGET(nemHash: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getXPXTransactionUsingGET(nemHash: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getXPXTransactionUsingGET(nemHash: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (nemHash === null || nemHash === undefined) {
            throw new Error('Required parameter nemHash was null or undefined when calling getXPXTransactionUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/transaction/get/${encodeURIComponent(String(nemHash))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
