/**
 * Proximax P2P Storage REST API
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: proximax.storage@proximax.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DownloadService {

    protected basePath = 'http://demo-gateway.proximax.io';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Download a binary using NEM Transaction Hash
     * Download the binary file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
     * @param nemHash The NEM Transaction Hash
     * @param transferMode Transfer Mode default: bytes (bytes,stream,base64)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadBinaryUsingGET(nemHash: string, transferMode: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public downloadBinaryUsingGET(nemHash: string, transferMode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public downloadBinaryUsingGET(nemHash: string, transferMode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public downloadBinaryUsingGET(nemHash: string, transferMode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (nemHash === null || nemHash === undefined) {
            throw new Error('Required parameter nemHash was null or undefined when calling downloadBinaryUsingGET.');
        }
        if (transferMode === null || transferMode === undefined) {
            throw new Error('Required parameter transferMode was null or undefined when calling downloadBinaryUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nemHash !== undefined) {
            queryParameters = queryParameters.set('nemHash', <any>nemHash);
        }
        if (transferMode !== undefined) {
            queryParameters = queryParameters.set('transferMode', <any>transferMode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/download/binary`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download a file associated to a NEM Hash.
     * Download the binary file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
     * @param nemHash The NEM Transaction Hash
     * @param transferMode Transfer Mode default: bytes (bytes,stream,base64)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadFileUsingGET(nemHash: string, transferMode: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public downloadFileUsingGET(nemHash: string, transferMode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public downloadFileUsingGET(nemHash: string, transferMode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public downloadFileUsingGET(nemHash: string, transferMode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (nemHash === null || nemHash === undefined) {
            throw new Error('Required parameter nemHash was null or undefined when calling downloadFileUsingGET.');
        }
        if (transferMode === null || transferMode === undefined) {
            throw new Error('Required parameter transferMode was null or undefined when calling downloadFileUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nemHash !== undefined) {
            queryParameters = queryParameters.set('nemHash', <any>nemHash);
        }
        if (transferMode !== undefined) {
            queryParameters = queryParameters.set('transferMode', <any>transferMode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/download/file`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download a secure resource/blob using NEM Private Key and Transaction Hash
     * Download a blob associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
     * @param xPvkey The Sender or Receiver&#39;s Private Key
     * @param nemHash The NEM Transaction Hash
     * @param transferType Transfer Type default: bytes (bytes,stream,base64)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadSecureBinaryUsingGET(xPvkey: string, nemHash: string, transferType: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public downloadSecureBinaryUsingGET(xPvkey: string, nemHash: string, transferType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public downloadSecureBinaryUsingGET(xPvkey: string, nemHash: string, transferType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public downloadSecureBinaryUsingGET(xPvkey: string, nemHash: string, transferType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (xPvkey === null || xPvkey === undefined) {
            throw new Error('Required parameter xPvkey was null or undefined when calling downloadSecureBinaryUsingGET.');
        }
        if (nemHash === null || nemHash === undefined) {
            throw new Error('Required parameter nemHash was null or undefined when calling downloadSecureBinaryUsingGET.');
        }
        if (transferType === null || transferType === undefined) {
            throw new Error('Required parameter transferType was null or undefined when calling downloadSecureBinaryUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nemHash !== undefined) {
            queryParameters = queryParameters.set('nemHash', <any>nemHash);
        }
        if (transferType !== undefined) {
            queryParameters = queryParameters.set('transferType', <any>transferType);
        }

        let headers = this.defaultHeaders;
        if (xPvkey !== undefined && xPvkey !== null) {
            headers = headers.set('x-pvkey', String(xPvkey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/download/secure/binary`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download a secure resource/file using NEM Private Key and Transaction Hash
     * Download a file associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
     * @param xPvkey The Sender or Receiver&#39;s Private Key
     * @param nemHash The NEM Transaction Hash
     * @param transferType Transfer Type default: bytes (bytes,stream,base64)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadSecureFileUsingGET(xPvkey: string, nemHash: string, transferType: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public downloadSecureFileUsingGET(xPvkey: string, nemHash: string, transferType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public downloadSecureFileUsingGET(xPvkey: string, nemHash: string, transferType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public downloadSecureFileUsingGET(xPvkey: string, nemHash: string, transferType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (xPvkey === null || xPvkey === undefined) {
            throw new Error('Required parameter xPvkey was null or undefined when calling downloadSecureFileUsingGET.');
        }
        if (nemHash === null || nemHash === undefined) {
            throw new Error('Required parameter nemHash was null or undefined when calling downloadSecureFileUsingGET.');
        }
        if (transferType === null || transferType === undefined) {
            throw new Error('Required parameter transferType was null or undefined when calling downloadSecureFileUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nemHash !== undefined) {
            queryParameters = queryParameters.set('nemHash', <any>nemHash);
        }
        if (transferType !== undefined) {
            queryParameters = queryParameters.set('transferType', <any>transferType);
        }

        let headers = this.defaultHeaders;
        if (xPvkey !== undefined && xPvkey !== null) {
            headers = headers.set('x-pvkey', String(xPvkey));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/download/secure/file`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download a base64 encoded plain text data using NEM Transaction Hash
     * Download a plain text data associated to a NEM Hash. If NEM Hash uses SECURE Message, it returns the NEM TXN Payload Instead
     * @param nemHash The NEM Transaction Hash
     * @param transferMode Transfer Mode default: bytes (bytes,stream)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadTextUsingGET(nemHash: string, transferMode: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public downloadTextUsingGET(nemHash: string, transferMode: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public downloadTextUsingGET(nemHash: string, transferMode: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public downloadTextUsingGET(nemHash: string, transferMode: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (nemHash === null || nemHash === undefined) {
            throw new Error('Required parameter nemHash was null or undefined when calling downloadTextUsingGET.');
        }
        if (transferMode === null || transferMode === undefined) {
            throw new Error('Required parameter transferMode was null or undefined when calling downloadTextUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nemHash !== undefined) {
            queryParameters = queryParameters.set('nemHash', <any>nemHash);
        }
        if (transferMode !== undefined) {
            queryParameters = queryParameters.set('transferMode', <any>transferMode);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/download/text`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Download IPFS file associated to the datahash
     * Download IPFS file associated to the datahash
     * @param dataHash The NEM Transaction Hash
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadUsingDataHashUsingGET(dataHash: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public downloadUsingDataHashUsingGET(dataHash: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public downloadUsingDataHashUsingGET(dataHash: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public downloadUsingDataHashUsingGET(dataHash: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dataHash === null || dataHash === undefined) {
            throw new Error('Required parameter dataHash was null or undefined when calling downloadUsingDataHashUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (dataHash !== undefined) {
            queryParameters = queryParameters.set('dataHash', <any>dataHash);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/download/direct/datahash`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
