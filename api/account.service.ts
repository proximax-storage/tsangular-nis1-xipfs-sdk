/**
 * Proximax P2P Storage REST API
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: proximax.storage@proximax.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AccountMetaDataPair } from '../model/accountMetaDataPair';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AccountService {

    protected basePath = 'http://demo-gateway.proximax.io';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getAllIncomingNemAddressTransactions
     * 
     * @param publicKey The NEM Account Public Key
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllIncomingNemAddressTransactionsUsingGET(publicKey: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAllIncomingNemAddressTransactionsUsingGET(publicKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAllIncomingNemAddressTransactionsUsingGET(publicKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAllIncomingNemAddressTransactionsUsingGET(publicKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (publicKey === null || publicKey === undefined) {
            throw new Error('Required parameter publicKey was null or undefined when calling getAllIncomingNemAddressTransactionsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/account/get/incoming/transactions/${encodeURIComponent(String(publicKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllNemAddressTransactions
     * 
     * @param publicKey The NEM Account Public Key
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllNemAddressTransactionsUsingGET(publicKey: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAllNemAddressTransactionsUsingGET(publicKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAllNemAddressTransactionsUsingGET(publicKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAllNemAddressTransactionsUsingGET(publicKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (publicKey === null || publicKey === undefined) {
            throw new Error('Required parameter publicKey was null or undefined when calling getAllNemAddressTransactionsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/account/get/transactions/${encodeURIComponent(String(publicKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllNemAddressTransactionsWithPageSize
     * 
     * @param publicKey The NEM Account Public Key
     * @param pageSize Page Size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllNemAddressTransactionsWithPageSizeUsingGET(publicKey: string, pageSize: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAllNemAddressTransactionsWithPageSizeUsingGET(publicKey: string, pageSize: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAllNemAddressTransactionsWithPageSizeUsingGET(publicKey: string, pageSize: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAllNemAddressTransactionsWithPageSizeUsingGET(publicKey: string, pageSize: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (publicKey === null || publicKey === undefined) {
            throw new Error('Required parameter publicKey was null or undefined when calling getAllNemAddressTransactionsWithPageSizeUsingGET.');
        }
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling getAllNemAddressTransactionsWithPageSizeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/account/get/transactions/${encodeURIComponent(String(publicKey))}/${encodeURIComponent(String(pageSize))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllOutgoingNemAddressTransactions
     * 
     * @param publicKey The NEM Account Public Key
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllOutgoingNemAddressTransactionsUsingGET(publicKey: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAllOutgoingNemAddressTransactionsUsingGET(publicKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAllOutgoingNemAddressTransactionsUsingGET(publicKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAllOutgoingNemAddressTransactionsUsingGET(publicKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (publicKey === null || publicKey === undefined) {
            throw new Error('Required parameter publicKey was null or undefined when calling getAllOutgoingNemAddressTransactionsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/account/get/outgoing/transactions/${encodeURIComponent(String(publicKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllUnconfirmedNemAddressTransactions
     * 
     * @param publicKey The NEM Account Public Key
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllUnconfirmedNemAddressTransactionsUsingGET(publicKey: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAllUnconfirmedNemAddressTransactionsUsingGET(publicKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAllUnconfirmedNemAddressTransactionsUsingGET(publicKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAllUnconfirmedNemAddressTransactionsUsingGET(publicKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (publicKey === null || publicKey === undefined) {
            throw new Error('Required parameter publicKey was null or undefined when calling getAllUnconfirmedNemAddressTransactionsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/account/get/unconfirmed/transactions/${encodeURIComponent(String(publicKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the NEM Address Details
     * This endpoint returns the NEM Address/Account Information of a given address
     * @param publicKey The NEM Account Public Key
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNemAddressDetailsUsingGET(publicKey: string, observe?: 'body', reportProgress?: boolean): Observable<AccountMetaDataPair>;
    public getNemAddressDetailsUsingGET(publicKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AccountMetaDataPair>>;
    public getNemAddressDetailsUsingGET(publicKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountMetaDataPair>>;
    public getNemAddressDetailsUsingGET(publicKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (publicKey === null || publicKey === undefined) {
            throw new Error('Required parameter publicKey was null or undefined when calling getNemAddressDetailsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<AccountMetaDataPair>(`${this.basePath}/account/get/info/${encodeURIComponent(String(publicKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
